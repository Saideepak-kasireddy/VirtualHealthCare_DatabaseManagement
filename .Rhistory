addNumbers <- function(x, y)
{
# body of code here
z <- x + y
return(z)
}
addNumbers(3,5)
## Function to calculate p-norm of a vector
p_norm <- function(x, p=2)
{
modx <- abs(x)
z <- sum(modx^p)
return(z^(1/p))
}
p_norm(c(3,4))
p_norm(c(3,4), 1)
## Function to get even numbered entries in vector
evenElements <- function(x)
{
len <- length(x)
sq <- seq(from=2, to=len, by=2)
return(x[sq])
}
evenElements(c(1,3,5,7,9,11))
evenElements(4) # Need to be improved
addNumbers <- function(x, y)
{
# body of code here
z <- x + y
return(z)
}
addNumbers(3,5)
p_norm <- function(x, p=2)
{
modx <- abs(x)
z <- sum(modx^p)
return(z^(1/p))
}
p_norm(c(3,4))
p_norm(c(3,4), 1)
## Function to get even numbered entries in vector
evenElements <- function(x)
{
len <- length(x)
sq <- seq(from=2, to=len, by=2)
return(x[sq])
}
evenElements(c(1,3,5,7,9,11))
evenElements(4) # Need to be improved
addNumbers <- function(x, y)
{
# body of code here
z <- x + y
return(z)
}
addNumbers(3,5)
## Function to calculate p-norm of a vector
p_norm <- function(x, p=2)
{
modx <- abs(x)
z <- sum(modx^p)
return(z^(1/p))
}
p_norm(c(3,4))
p_norm(c(3,4), 1)
evenElements <- function(x)
{
len <- length(x)
sq <- seq(from=2, to=len, by=2)
return(x[sq])
}
evenElements(c(1,3,5,7,9,11))
evenElements(4) # Need to be improved
evenElements <- function(x)
{
len <- length(x)
if (len < 2) return(numeric(0))
sq <- seq(from=2, to=len, by=2)
return(x[sq])
}
evenElements(4)
sayHello <- function () {
return("Hello ... Welcome to R!")
}
sayHello()
result <- sayHello()
result
mySquare <- function (x) {
return(x*x)
}
mySquare(5)
paste("Square of 5 is", mySquare(5))
y <- mySquare(5)
y
paste("Square of 5 is", y)
mySquare(mySquare(5))
hypotenuse <- function (x, y) {
z_squared <- (x*x + y*y)
return (sqrt(z_squared))
}
hypotenuse(3, 4)
paste("Hypotenuse of right triangle with sides 3 and 4 is",
hypotenuse(3, 4))
hypotenuse <- function (x, y) {
return (sqrt(x*x + y*y))
}
hypotenuse(3, 4)
paste("Hypotenuse of right triangle with sides 3 and 4 is",
hypotenuse(3, 4))
z <- hypotenuse(3, 4)
z
paste("Hypotenuse of right triangle with sides 3 and 4 is", z)
hypotenuse(hypotenuse(3, 4), 12)
sumOfOnlyPositive <- function (x) {
return (sum(x[x > 0]))
}
temps <- c(10, -20, 20, -10)
sayHello <- function () {
return("Hello ... Welcome to R!")
}
sayHello()
result <- sayHello()
result
mySquare <- function (x) {
return(x*x)
}
mySquare(5)
paste("Square of 5 is", mySquare(5))
y <- mySquare(5)
y
paste("Square of 5 is", y)
mySquare(mySquare(5))
hypotenuse <- function (x, y) {
z_squared <- (x*x + y*y)
return (sqrt(z_squared))
}
hypotenuse(3, 4)
paste("Hypotenuse of right triangle with sides 3 and 4 is",
hypotenuse(3, 4))
hypotenuse <- function (x, y) {
return (sqrt(x*x + y*y))
}
hypotenuse(3, 4)
paste("Hypotenuse of right triangle with sides 3 and 4 is",
hypotenuse(3, 4))
z <- hypotenuse(3, 4)
z
paste("Hypotenuse of right triangle with sides 3 and 4 is", z)
hypotenuse(hypotenuse(3, 4), 12)
sumOfOnlyPositive <- function (x) {
return (sum(x[x > 0]))
}
temps <- c(10, -20, 20, -10)
sum(temps)
sumOfOnlyPositive(temps)
sumOfOnlyPositive(c(10, -20, 20, -10))
sumOfAbsolute <- function (x) {
return(sum(abs(x)))
}
sumOfAbsolute(c(10, -20, 20, -10))
abs(temps)
isPositive <- function (x) {
return (x > 0)
}
isPositive(10)
isPositive(-10)
isPositive(c(10, -10))
allPositive <- function (x) {
return(all(x > 0))
}
allPositive(c(10, 20, 30))
allPositive(c(10, -10, 20))
isTeenager <- function (x) {
return (x >= 13 & x <= 19)
}
isTeenager(15)
isTeenager(20)
inc.1 <- function (x) {
return (x + 1)
}
inc.1(10)
inc.1(x = 10)
inc.1(c(10,20,30))
inc.1(10:20)
inc.1 <- function (x) {
x + 1
}
inc.1(10)
inc.1(x = 10)
inc.1(c(10,20,30))
inc.1(10:20)
inc.2 <- function (x, y) {
return (x - y)
}
inc.2(10, 20)
inc.2(x = 10, y = 20)
inc.2(y = 20, x = 10)
inc.2(10, y = 20)
inc.2(y = 20, 10)
inc.2(10)
inc.3 <- function (x, y = 100) {
return (x + y)
}
inc.3(10)
inc.3(10, 20)
inc.3()
inc.4 <- function (x = 5, y = 7) {
return (x + y)
}
inc.4()
inc.4(2)
inc.4(2, 3)
inc.4(y = 3)
inc.5 <- function(x, y = 100, z = 10) {
return(x - y - z)
}
inc.5(1000)
inc.5(1000, 500)
inc.5(1000, 500, 200)
inc.5(1000, z = 200)
inc.5(1000, z = 200, y = 500)
x <- 10
foo <- function() {
cat("#2 In foo ", x, "\n");
x <- 20
cat("#3 In foo ", x, "\n");
bar()
cat("#6 In foo ", x, "\n");
}
bar <- function() {
cat("#4 In bar ", x, "\n");
x <- 30
cat("#5 In bar ", x, "\n");
}
cat("#1 Before foo ", x, "\n");
foo()
cat("#7 After foo ", x, "\n");
rm(z)
x <- 10
y <- 20
test.1 <- function(a, b){
x <- a
y <- b
z <- a + b
return(z)
}
test.1(1, 2)
x
y
z
x <- 20
test.2 <- function(a){
z <- a + x
return(z)
}
test.2(1)
x
a
z
x <- 100
y <- 200
test.3 <- function(a, b){
x <<- a
y <- b
z <<- x + y
return(z)
}
test.3(1, 2)
x
y
z
x <- 1
y <- 2
if (x < y) {
max <- y
min <- x
} else {
max <- x
min <- y
}
max
min
max <- if (x < y) y else x
max
x <- c(10, 15)
y <- c(20, 5)
if (x < y) {
my.max <- y
my.min <- x
} else {
my.max <- x
my.min <- y
}
my.max
my.min
my.max <- if (x < y) y else x
my.max
my.max <- ifelse(x < y, y, x)
my.max
my.maxmin <- function (x, y) {
if (x < y) {
return (c(y, x))
} else {
return (c(x, y))
}
}
my.maxmin(100, 200)
my.maxmin(100, 20)
x <- c(10, 20, 30, 40, 50)
for (i in x) {
cat("Square of ", i, " = ", i*i, "\n")
}
i
n <- 10
for (i in 1:n) {
cat("Square of ", i, " = ", i*i, "\n")
}
n <- 10
for (i in seq(1,n, by = 2)) {
cat("Square of ", i, " = ", i*i, "\n")
}
my.max <- function (x) {
result <- -Inf
for (number in x) {
if (number > result) {
result <- number
}
}
return (result)
}
my.max(c(100, 50, 200, 80))
max(c(100, 50, 200, 80))
n <- 10
sum <- 0
i <- 1
while (i <= n) {
sum <- sum + i
i <- i+1
}
cat("Sum of first ", n, " numbers = ", sum)
limit <- 550
sum <- 0
i <- 0
while (TRUE) {
i <- i+1
sum <- sum + i
if (sum >= limit) break
}
sum
i
if (sum > limit) {
sum <- sum - i
i <- i-1
}
sum
i
cat("Sum of first ", i, " numbers = ", sum)
n <- 10
i <- 1
repeat {
cat("Square of ", i, " = ", i*i, "\n")
i <- i+2
if (i > n) break
}
my.reverse <- function (x) {
return (x[length(x):1])
}
my.reverse(c(10, 50, 100))
my.reverse(20:30)
my.reverse <- function (x) {
x[length(x):1]
}
my.reverse(c(10, 50, 100))
my.reverse(20:30)
my.factorial <- function (n) {
if (n <= 0) {
return (1)
} else {
return (n * my.factorial(n-1))
}
}
my.factorial(5)
include <iostream>
